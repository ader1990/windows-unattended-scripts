{
    "Description": "MS Exchange Server 2013 Deployment",
    "HeatTemplateVersion": "2013-05-23",
    "Mappings": {
        "Flavor2Arch": {
            "m1.large": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.sminy": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            }
        },
        "VersionArch2Image": {
            "WS12R2": {
                "64": "Windows Server 2012 R2 Std Eval VHD"
            }
        }
    },
    "Parameters": {
        "AdministratorPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "ConstraintDescription": "Must contain letters, numbers and symbols",
            "Description": "The Domain Administrator password",
            "MaxLength": "64",
            "MinLength": "8",
            "Type": "String"
        },
        "AdministratorUsername": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "Administrator",
            "Description": "The Domain Administrator username",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "DatabaseName": {
            "Default": "exchange2013_db1",
            "Description": "Exchange Mailbox Database Name",
            "Type": "String"
        },
        "DomainName": {
            "Default": "cloudbase",
            "Description": "The active directory domain name",
            "Type": "String"
        },
        "DomainNetbiosName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "cloudbase",
            "Description": "The Netbios domain name",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "Flavor": {
            "AllowedValues": [
                "m1.tiny",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge"
            ],
            "ConstraintDescription": "Must be a valid flavor.",
            "Description": "",
            "Type": "String"
        },
        "IsoSetupPath": {
            "Default": "E:\\mu_exchange_server_2013_x64_dvd_1112105.iso",
            "Description": "The path to the sql server 2012 iso file",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing keypair to enable SSH access to the instances",
            "Type": "String"
        },
        "LocalAdministratorUsername": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "ader",
            "Description": "The local administrator account",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "MediaDeviceVolumeId": {
            "ConstraintDescription": "Must be a valid volume id.",
            "Default": "3c8107b2-c33d-4f35-9e65-b1eb9a423a98",
            "Description": "Volume id",
            "Type": "String"
        },
        "ServerName": {
            "Default": "ExchangeServwer",
            "Description": "Server name",
            "Type": "String"
        },
        "OwaHostName": {
            "Default": "owa.cloudbase.local",
            "Description": "The default name of the owa website",
            "Type": "String"
        },
        "PrivateNetId": {
            "ConstraintDescription": "Must be a valid net id.",
            "Default": "3cbfe7a6-4c08-4b30-9788-785e7c9fa177",
            "Description": "private net id",
            "Type": "String"
        },
        "PrivateSubnetId": {
            "ConstraintDescription": "Must be a valid subnet id.",
            "Default": "3cbfe7a6-4c08-4b30-9788-785e7c9fa177",
            "Description": "Subnet private id",
            "Type": "String"
        },
        "PublicNetId": {
            "ConstraintDescription": "Must be a valid net id.",
            "Default": "3cbfe7a6-4c08-4b30-9788-785e7c9fa177",
            "Description": "public net id",
            "Type": "String"
        },
        "WindowsVersion": {
            "AllowedValues": [
                "WS12R2"
            ],
            "Default": "WS12R2",
            "Description": "Windows version of choice",
            "Type": "String"
        }
    },
    "Resources": {
        "ADWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "ADWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MSEXCH2013",
            "Properties" : {
                "Handle" : {"Ref" : "ADWaitHandle"},
                "Timeout" : "3600"
            }
        },
        "MSEXCH2013": {
            "Properties": {
                "flavor": {
                    "Ref": "Flavor"
                },
                "image": {
                    "Fn::FindInMap": [
                        "VersionArch2Image",
                        {
                            "Ref": "WindowsVersion"
                        },
                        {
                            "Fn::FindInMap": [
                                "Flavor2Arch",
                                {
                                    "Ref": "Flavor"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "name": {
                    "Ref": "ServerName"
                },
                "key_name": {
                    "Ref": "KeyName"
                },
                "networks": [
                    {
                        "port": {
                            "Ref": "floating_ip_port"
                        }
                    }
                ],
                "user_data": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#ps1_sysnative\n",
                                "Get-Disk | ? IsOffline | Set-Disk -IsOffline:$false\n",
                                "$adminusername = \"",
                                {
                                    "Ref": "AdministratorUsername"
                                },
                                "\"\n",
                                "$adminpassword = \"",
                                {
                                    "Ref": "AdministratorPassword"
                                },
                                "\"\n",
                                "$LocalAdminUsername = \"",
                                {
                                    "Ref": "LocalAdministratorUsername"
                                },
                                "\"\n",
                                "$DatabaseName = \"",
                                {
                                    "Ref": "DatabaseName"
                                },
                                "\"\n",
                                "$setupPath = \"",
                                {
                                    "Ref": "IsoSetupPath"
                                },
                                "\"\n",
                                "$domain = \"",
                                {
                                    "Ref": "DomainName"
                                },
                                "\"\n",
                                "$OwaName = \"",
                                {
                                    "Ref": "OwaHostName"
                                },
                                "\"\n",
                                "$waitHandleUrl = \"",
                                {
                                    "Ref": "ADWaitHandle"
                                },
                                "\"\n",
                                "$cfnMessage = '{\"Status\" : \"SUCCESS\",\"Reason\" : \"Configuration Complete\",\"UniqueId\" : \"ID1234\",\"Data\" : \"Application has completed configuration.\"}'\n",
                                "#Invoke-RestMethod -Method PUT -Uri $waitHandleUrl -Body $cfnMessage\n",
                                "$tempFolder = \"c:\\Windows\\temp\\\"\n",
                                "$logFile = $tempFolder + \"install_exchange2013_log.txt\"\n",
                                "if(!(Test-Path -Path $logFile )){\n",
                                "New-Item $logFile -type file\n",
                                "}\n",
                                "function log([string] $message){\n",
                                "Add-Content $logFile $message\n",
                                "}\n",
                                "function Generate-Windows-Password($passwordLength=15){\n",
                                "$passwordFound = $False\n",
                                "$maxSteps = 100\n",
                                "$password = \"\"\n",
                                "$assembly = [Reflection.Assembly]::LoadWithPartialName(\"System.Web\")\n",
                                "\n",
                                "while ($passwordFound -ne $True -and $maxSteps -ne 0){\n",
                                "$password =  [System.Web.Security.Membership]::GeneratePassword($passwordLength,0)\n",
                                "\n",
                                "$i = 0\n",
                                "$upper = [regex]\"[A-Z]\"\n",
                                "$lower = [regex]\"[a-z]\"\n",
                                "$number = [regex]\"[0-9]\"\n",
                                "$special = [regex]\"[^a-zA-Z0-9]\"\n",
                                "If ($upper.Matches($password).count -ge 1){\n",
                                "$i++\n",
                                "}\n",
                                "If ($lower.Matches($password).count -ge 1){\n",
                                "$i++\n",
                                "}\n",
                                "If ($number.Matches($password).count -ge 1){\n",
                                "$i++\n",
                                "}\n",
                                "If ($special.Matches($password).count -ge 1){\n",
                                "$i++\n",
                                "}\n",
                                "If ($i -eq 4){\n",
                                "$passwordFound = $True\n",
                                "}\n",
                                "$maxSteps = $maxSteps - 1\n",
                                "}\n",
                                "if ($passwordFound){\n",
                                "return $password\n",
                                "}\n",
                                "else{\n",
                                "throw \"Failed to generate password.\"\n",
                                "}\n",
                                "}\n",
                                "\n",
                                "log $env:TEMP\n",
                                "$ThisScript = $MyInvocation.MyCommand.Definition\n",
                                "$DestinationScript = \"C:\\Windows\\Temp\\Exchange_Unattended.ps1\"\n",
                                "$iso = Mount-DiskImage -PassThru $setupPath\n",
                                "$isoSetupPath = (Get-Volume -DiskImage $iso).DriveLetter + \":\\setup.exe\"\n",
                                "\n",
                                "Write-Host \"Installing Exchange Server 2013\"\n",
                                "if (!($env:userdomain -eq $domain))\n",
                                "{\n",
                                "$hostname = hostname\n",
                                "$localAdminPassword = \"Passw0rd\"\n",
                                "$computer = [ADSI]\"WinNT://$env:computername\"\n",
                                "$localAdmin = $Computer.Create(\"User\", $localAdminUsername)\n",
                                "$localAdmin.SetPassword($localAdminPassword)\n",
                                "$localAdmin.SetInfo()\n",
                                "Write-Host $localAdminPassword \n",
                                "([ADSI]\"WinNT://$env:computername/Administrators,group\").Add(\"WinNT://$env:computername/$localAdminUsername\")\n",
                                "\n",
                                "#Join the Active Directory Domain\n",
                                "netdom join $env:computername /Domain:$domain /UserD:$adminusername /PasswordD:$adminpassword /UserO:$LocalAdminUsername /PasswordO:$localAdminPassword\n",
                                "if (!$?) {\n",
                                "throw \"Failed to join Active Directory Domain.\"\n",
                                "}\n",
                                "Copy-Item -Path $ThisScript -Destination $DestinationScript\n",
                                "Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"  -Name \"ConfigureExchange\" -Value (\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe -executionPolicy Unrestricted -File $DestinationScript\")\n",
                                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Value 1\n",
                                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value \"$domain\\$adminusername\"\n",
                                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Value $adminpassword\n",
                                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value $domain\n",
                                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoLogonCount -Value 2 -Type \"DWord\"\n",
                                "Install-WindowsFeature RSAT-ADDS, AS-HTTP-Activation, Desktop-Experience, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation\n",
                                "log \"Installed windows features\"\n",
                                "Restart-Computer -Force\n",
                                "}\n",
                                "else\n",
                                "{\n",
                                "try{\n",
                                "$CountLogon = [int](Get-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoLogonCount).AutoLogonCount\n",
                                "if ($CountLogon -eq 1)\n",
                                "{\n",
                                "Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"  -Name \"ConfigureExchange\" -Value (\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe -executionPolicy Unrestricted -File $DestinationScript\")\n",
                                "$temp = \"c:\\Windows\\Temp\"\n",
                                "(new-object System.Net.WebClient).DownloadFile(\"http://download.microsoft.com/download/0/A/2/0A28BBFA-CBFA-4C03-A739-30CCA5E21659/FilterPack64bit.exe\" , \"$temp\\FilterPack64bit.exe\")\n",
                                "Start-Process -Wait \"$temp\\FilterPack64bit.exe\" -ArgumentList \"/quiet\"\n",
                                "del \"$temp\\FilterPack64bit.exe\"\n",
                                "(new-object System.Net.WebClient).DownloadFile(\"http://download.microsoft.com/download/A/A/3/AA345161-18B8-45AE-8DC8-DA6387264CB9/filterpack2010sp1-kb2460041-x64-fullfile-en-us.exe\" , \"$temp\\filterpack2010sp1-kb2460041-x64-fullfile-en-us.exe\")\n",
                                "Start-Process -Wait \"$temp\\filterpack2010sp1-kb2460041-x64-fullfile-en-us.exe\" -ArgumentList \"/quiet\"\n",
                                "del \"$temp\\filterpack2010sp1-kb2460041-x64-fullfile-en-us.exe\"\n",
                                "(new-object System.Net.WebClient).DownloadFile(\"http://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\" , \"$temp\\UcmaRuntimeSetup.exe\")\n",
                                "Start-Process -Wait \"$temp\\UcmaRuntimeSetup.exe\" -ArgumentList \"/quiet\"\n",
                                "del \"$temp\\UcmaRuntimeSetup.exe\"\n",
                                "Start-Process  -Wait -FilePath $isoSetupPath -ArgumentList \"/IAcceptExchangeServerLicenseTerms /ps\"\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Start-Process  -Wait -FilePath $isoSetupPath -ArgumentList \"/IAcceptExchangeServerLicenseTerms /p /on:$env:userdomain\"\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Start-Process  -Wait -FilePath $isoSetupPath -ArgumentList \"/IAcceptExchangeServerLicenseTerms /pd\"\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Start-Process  -Wait -FilePath $isoSetupPath -ArgumentList \"/IAcceptExchangeServerLicenseTerms /mode:install /InstallWindowsComponents /r:mb,ca /MdbName:$DatabaseName\"\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "log \"Finished first step of the Exchange install.\"\n",
                                "Restart-Computer -Force\n",
                                "}\n",
                                "else\n",
                                "{\n",
                                "log \"Started last step of the Exchange install.\"\n",
                                "ADD-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn\n",
                                "if (!$?) {\n",
                                "log \"Failed adding snap-in\"\n",
                                "}\n",
                                "$ExServer=hostname\n",
                                "$InternalName=$OwaName\n",
                                "$ExternalName=$OwaName\n",
                                "New-SendConnector -Internet -Name \"MSExchange Send Connector$ExServer\" -AddressSpaces \"*\"\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Get-WebservicesVirtualDirectory -Server $ExServer | Set-WebservicesVirtualDirectory -InternalURL https://$InternalName/EWS/Exchange.asmx -ExternalURL https://$externalName/EWS/Exchange.asmx\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Get-OwaVirtualDirectory -Server $ExServer | Set-OwaVirtualDirectory -InternalURL https://$InternalName/owa -ExternalURL https://$ExternalName/owa\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Get-ecpVirtualDirectory -Server $ExServer | Set-ecpVirtualDirectory -InternalURL https://$InternalName/ecp -ExternalURL https://$ExternalName/ecp\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Get-ActiveSyncVirtualDirectory -Server $ExServer | Set-ActiveSyncVirtualDirectory -InternalURL https://$InternalName/Microsoft-Server-ActiveSync -ExternalURL https://$ExternalName/Microsoft-Server-ActiveSync\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Get-OABVirtualDirectory -Server $ExServer | Set-OABVirtualDirectory -InternalUrl https://$InternalName/OAB -ExternalURL https://$ExternalName/OAB\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Set-ClientAccessServer $ExServer -AutodiscoverServiceInternalUri https://$internalName/Autodiscover/Autodiscover.xml\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "Set-OutlookAnywhere -Identity \"$ExServer\\Rpc (Default Web Site)\" -InternalHostname $internalName -ExternalHostName $ExternalName -InternalClientAuthenticationMethod ntlm -InternalClientsRequireSsl:$True -ExternalClientAuthenticationMethod Basic -ExternalClientsRequireSsl:$True\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "iisreset\n",
                                "if (!$?) {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "}\n",
                                "}\n",
                                "catch {\n",
                                "log ($error[0] | out-string)\n",
                                "}\n",
                                "}\n",
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "OS::Nova::Server"
        },
        "attachment": {
            "Properties": {
                "instance_uuid": {
                    "Ref": "MSEXCH2013"
                },
                "mountpoint": "/dev/sdb",
                "volume_id": {
                    "Ref": "MediaDeviceVolumeId"
                }
            },
            "Type": "OS::Cinder::VolumeAttachment"
        },
        "floating_ip": {
            "Properties": {
                "floating_network_id": {
                    "Ref": "PublicNetId"
                },
                "port_id": {
                    "Ref": "floating_ip_port"
                }
            },
            "Type": "OS::Neutron::FloatingIP"
        },
        "floating_ip_port": {
            "Properties": {
                "fixed_ips": [
                    {
                        "subnet_id": {
                            "Ref": "PrivateSubnetId"
                        }
                    }
                ],
                "network_id": {
                    "Ref": "PrivateNetId"
                }
            },
            "Type": "OS::Neutron::Port"
        }
    }
}
